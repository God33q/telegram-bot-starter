import os
import random
import time

from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram.ext.callbackcontext import CallbackContext

# Токен бота
BOT_TOKEN = "7506456129:AAEkpmkJvuT7MMuozrz5yFgjiEI26t3TnVE"

# Список идентификаторов загруженных видео
videos = []

# Обработчик команды /start
def start(update: Update, context: CallbackContext):
    # Отправляет первое случайное видео
    random_video = random.choice(videos)
    context.bot.send_video(update.effective_chat.id, open(random_video, 'rb'))

    # Отправляет кнопку "Далее"
    context.bot.send_message(update.effective_chat.id, "Далее", reply_markup=next_button())

# Обработчик нажатия на кнопку "Далее"
def next_video(update: Update, context: CallbackContext):
    # Отправляет следующее случайное видео
    random_video = random.choice(videos)
    context.bot.send_video(update.effective_chat.id, open(random_video, 'rb'))

# Обработчик команды /add_video (для владельца)
def add_video(update: Update, context: CallbackContext):
    # Проверяет, является ли пользователь владельцем бота
    if update.effective_user.id != OWNER_ID:
        return

    # Проверяет, загружено ли видео
    if not context.args:
        update.message.reply_text("Неверный формат команды. Usage: /add_video <путь_к_файлу>")
        return

    # Загружает видео
    video_path = context.args[0]
    if not os.path.isfile(video_path):
        update.message.reply_text("Указанный файл не существует.")
        return

    videos.append(video_path)
    update.message.reply_text("Видео успешно добавлено.")

# Обработчик команды /delete_video (для владельца)
def delete_video(update: Update, context: CallbackContext):
    # Проверяет, является ли пользователь владельцем бота
    if update.effective_user.id != OWNER_ID:
        return

    # Проверяет, указан ли идентификатор видео
    if not context.args:
        update.message.reply_text("Неверный формат команды. Usage: /delete_video <идентификатор_видео>")
        return

    # Идентификатор видео
    video_id = int(context.args[0])

    # Проверяет, существует ли видео
    if video_id not in videos:
        update.message.reply_text("Видео с указанным идентификатором не найдено.")
        return

    # Удаляет видео
    videos.remove(video_id)
    update.message.reply_text("Видео успешно удалено.")

# Функция создания кнопки "Далее"
def next_button():
    return [[InlineKeyboardButton("Далее", callback_data="next_video")]]

# Основная функция
def main():
    # Создает обновление бота
    updater = Updater(BOT_TOKEN)

    # Диспетчер
    dp = updater.dispatcher

    # Регистрирует обработчики
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(next_video, pattern="next_video"))

    # Регистрирует обработчики для владельца
    dp.add_handler(CommandHandler("add_video", add_video))
    dp.add_handler(CommandHandler("delete_video", delete_video))

    # Запускает бота
    updater.start_polling()

    # Блокирует, пока бот не остановится
    updater.idle()

if __name__ == "__main__":
    main()
